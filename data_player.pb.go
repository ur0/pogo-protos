// Code generated by protoc-gen-go.
// source: data_player.proto
// DO NOT EDIT!

package pogo_protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of PokemonId from enums.proto

type DailyBonus struct {
	NextCollectedTimestampMs            int64 `protobuf:"varint,1,opt,name=next_collected_timestamp_ms,json=nextCollectedTimestampMs" json:"next_collected_timestamp_ms,omitempty"`
	NextDefenderBonusCollectTimestampMs int64 `protobuf:"varint,2,opt,name=next_defender_bonus_collect_timestamp_ms,json=nextDefenderBonusCollectTimestampMs" json:"next_defender_bonus_collect_timestamp_ms,omitempty"`
}

func (m *DailyBonus) Reset()                    { *m = DailyBonus{} }
func (m *DailyBonus) String() string            { return proto.CompactTextString(m) }
func (*DailyBonus) ProtoMessage()               {}
func (*DailyBonus) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

type ContactSettings struct {
	SendMarketingEmails   bool `protobuf:"varint,1,opt,name=send_marketing_emails,json=sendMarketingEmails" json:"send_marketing_emails,omitempty"`
	SendPushNotifications bool `protobuf:"varint,2,opt,name=send_push_notifications,json=sendPushNotifications" json:"send_push_notifications,omitempty"`
}

func (m *ContactSettings) Reset()                    { *m = ContactSettings{} }
func (m *ContactSettings) String() string            { return proto.CompactTextString(m) }
func (*ContactSettings) ProtoMessage()               {}
func (*ContactSettings) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

type EquippedBadge struct {
	BadgeType                         BadgeType `protobuf:"varint,1,opt,name=badge_type,json=badgeType,enum=POGOProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	Level                             int32     `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	NextEquipChangeAllowedTimestampMs int64     `protobuf:"varint,3,opt,name=next_equip_change_allowed_timestamp_ms,json=nextEquipChangeAllowedTimestampMs" json:"next_equip_change_allowed_timestamp_ms,omitempty"`
}

func (m *EquippedBadge) Reset()                    { *m = EquippedBadge{} }
func (m *EquippedBadge) String() string            { return proto.CompactTextString(m) }
func (*EquippedBadge) ProtoMessage()               {}
func (*EquippedBadge) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{2} }

type Currency struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{3} }

type PlayerPublicProfile struct {
	Name   string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Level  int32         `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Avatar *PlayerAvatar `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *PlayerPublicProfile) Reset()                    { *m = PlayerPublicProfile{} }
func (m *PlayerPublicProfile) String() string            { return proto.CompactTextString(m) }
func (*PlayerPublicProfile) ProtoMessage()               {}
func (*PlayerPublicProfile) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{4} }

func (m *PlayerPublicProfile) GetAvatar() *PlayerAvatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

type PlayerStats struct {
	Level                int32   `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Experience           int64   `protobuf:"varint,2,opt,name=experience" json:"experience,omitempty"`
	PrevLevelXp          int64   `protobuf:"varint,3,opt,name=prev_level_xp,json=prevLevelXp" json:"prev_level_xp,omitempty"`
	NextLevelXp          int64   `protobuf:"varint,4,opt,name=next_level_xp,json=nextLevelXp" json:"next_level_xp,omitempty"`
	KmWalked             float32 `protobuf:"fixed32,5,opt,name=km_walked,json=kmWalked" json:"km_walked,omitempty"`
	PokemonsEncountered  int32   `protobuf:"varint,6,opt,name=pokemons_encountered,json=pokemonsEncountered" json:"pokemons_encountered,omitempty"`
	UniquePokedexEntries int32   `protobuf:"varint,7,opt,name=unique_pokedex_entries,json=uniquePokedexEntries" json:"unique_pokedex_entries,omitempty"`
	PokemonsCaptured     int32   `protobuf:"varint,8,opt,name=pokemons_captured,json=pokemonsCaptured" json:"pokemons_captured,omitempty"`
	Evolutions           int32   `protobuf:"varint,9,opt,name=evolutions" json:"evolutions,omitempty"`
	PokeStopVisits       int32   `protobuf:"varint,10,opt,name=poke_stop_visits,json=pokeStopVisits" json:"poke_stop_visits,omitempty"`
	PokeballsThrown      int32   `protobuf:"varint,11,opt,name=pokeballs_thrown,json=pokeballsThrown" json:"pokeballs_thrown,omitempty"`
	EggsHatched          int32   `protobuf:"varint,12,opt,name=eggs_hatched,json=eggsHatched" json:"eggs_hatched,omitempty"`
	BigMagikarpCaught    int32   `protobuf:"varint,13,opt,name=big_magikarp_caught,json=bigMagikarpCaught" json:"big_magikarp_caught,omitempty"`
	BattleAttackWon      int32   `protobuf:"varint,14,opt,name=battle_attack_won,json=battleAttackWon" json:"battle_attack_won,omitempty"`
	BattleAttackTotal    int32   `protobuf:"varint,15,opt,name=battle_attack_total,json=battleAttackTotal" json:"battle_attack_total,omitempty"`
	BattleDefendedWon    int32   `protobuf:"varint,16,opt,name=battle_defended_won,json=battleDefendedWon" json:"battle_defended_won,omitempty"`
	BattleTrainingWon    int32   `protobuf:"varint,17,opt,name=battle_training_won,json=battleTrainingWon" json:"battle_training_won,omitempty"`
	BattleTrainingTotal  int32   `protobuf:"varint,18,opt,name=battle_training_total,json=battleTrainingTotal" json:"battle_training_total,omitempty"`
	PrestigeRaisedTotal  int32   `protobuf:"varint,19,opt,name=prestige_raised_total,json=prestigeRaisedTotal" json:"prestige_raised_total,omitempty"`
	PrestigeDroppedTotal int32   `protobuf:"varint,20,opt,name=prestige_dropped_total,json=prestigeDroppedTotal" json:"prestige_dropped_total,omitempty"`
	PokemonDeployed      int32   `protobuf:"varint,21,opt,name=pokemon_deployed,json=pokemonDeployed" json:"pokemon_deployed,omitempty"`
	PokemonCaughtByType  []byte  `protobuf:"bytes,22,opt,name=pokemon_caught_by_type,json=pokemonCaughtByType,proto3" json:"pokemon_caught_by_type,omitempty"`
	SmallRattataCaught   int32   `protobuf:"varint,23,opt,name=small_rattata_caught,json=smallRattataCaught" json:"small_rattata_caught,omitempty"`
}

func (m *PlayerStats) Reset()                    { *m = PlayerStats{} }
func (m *PlayerStats) String() string            { return proto.CompactTextString(m) }
func (*PlayerStats) ProtoMessage()               {}
func (*PlayerStats) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{5} }

type PlayerCamera struct {
	IsDefaultCamera bool `protobuf:"varint,1,opt,name=is_default_camera,json=isDefaultCamera" json:"is_default_camera,omitempty"`
}

func (m *PlayerCamera) Reset()                    { *m = PlayerCamera{} }
func (m *PlayerCamera) String() string            { return proto.CompactTextString(m) }
func (*PlayerCamera) ProtoMessage()               {}
func (*PlayerCamera) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{6} }

type PlayerAvatar struct {
	Skin     int32  `protobuf:"varint,2,opt,name=skin" json:"skin,omitempty"`
	Hair     int32  `protobuf:"varint,3,opt,name=hair" json:"hair,omitempty"`
	Shirt    int32  `protobuf:"varint,4,opt,name=shirt" json:"shirt,omitempty"`
	Pants    int32  `protobuf:"varint,5,opt,name=pants" json:"pants,omitempty"`
	Hat      int32  `protobuf:"varint,6,opt,name=hat" json:"hat,omitempty"`
	Shoes    int32  `protobuf:"varint,7,opt,name=shoes" json:"shoes,omitempty"`
	Gender   Gender `protobuf:"varint,8,opt,name=gender,enum=POGOProtos.Enums.Gender" json:"gender,omitempty"`
	Eyes     int32  `protobuf:"varint,9,opt,name=eyes" json:"eyes,omitempty"`
	Backpack int32  `protobuf:"varint,10,opt,name=backpack" json:"backpack,omitempty"`
}

func (m *PlayerAvatar) Reset()                    { *m = PlayerAvatar{} }
func (m *PlayerAvatar) String() string            { return proto.CompactTextString(m) }
func (*PlayerAvatar) ProtoMessage()               {}
func (*PlayerAvatar) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{7} }

type PlayerCurrency struct {
	Gems int32 `protobuf:"varint,1,opt,name=gems" json:"gems,omitempty"`
}

func (m *PlayerCurrency) Reset()                    { *m = PlayerCurrency{} }
func (m *PlayerCurrency) String() string            { return proto.CompactTextString(m) }
func (*PlayerCurrency) ProtoMessage()               {}
func (*PlayerCurrency) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{8} }

func init() {
	proto.RegisterType((*DailyBonus)(nil), "POGOProtos.Data.Player.DailyBonus")
	proto.RegisterType((*ContactSettings)(nil), "POGOProtos.Data.Player.ContactSettings")
	proto.RegisterType((*EquippedBadge)(nil), "POGOProtos.Data.Player.EquippedBadge")
	proto.RegisterType((*Currency)(nil), "POGOProtos.Data.Player.Currency")
	proto.RegisterType((*PlayerPublicProfile)(nil), "POGOProtos.Data.Player.PlayerPublicProfile")
	proto.RegisterType((*PlayerStats)(nil), "POGOProtos.Data.Player.PlayerStats")
	proto.RegisterType((*PlayerCamera)(nil), "POGOProtos.Data.Player.PlayerCamera")
	proto.RegisterType((*PlayerAvatar)(nil), "POGOProtos.Data.Player.PlayerAvatar")
	proto.RegisterType((*PlayerCurrency)(nil), "POGOProtos.Data.Player.PlayerCurrency")
}

func init() { proto.RegisterFile("data_player.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 1049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x55, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xae, 0x92, 0xd8, 0x91, 0x29, 0xff, 0xd2, 0x8e, 0x23, 0xc4, 0x40, 0x51, 0x2b, 0x41, 0xe1,
	0xb6, 0xa8, 0xd2, 0x3a, 0x45, 0x0e, 0x41, 0x7b, 0xb0, 0x25, 0x23, 0x3d, 0xd4, 0x8d, 0xba, 0x76,
	0x9b, 0xa2, 0x17, 0x82, 0xbb, 0x4b, 0xaf, 0x08, 0xed, 0x92, 0x9b, 0x25, 0x57, 0xb6, 0x0e, 0x7d,
	0x99, 0x3e, 0x43, 0x1f, 0xab, 0xa7, 0x3e, 0x41, 0x87, 0x43, 0xae, 0xbc, 0x4e, 0x7d, 0x10, 0x44,
	0x7e, 0xdf, 0x37, 0xc3, 0xe1, 0x70, 0x66, 0x96, 0xec, 0xa4, 0xdc, 0x72, 0x56, 0xe6, 0x7c, 0x21,
	0xaa, 0x61, 0x59, 0x69, 0xab, 0xe9, 0xfe, 0xe4, 0xdd, 0xdb, 0x77, 0x13, 0xb7, 0x34, 0xc3, 0x31,
	0xb0, 0xc3, 0x09, 0xb2, 0xcf, 0x7a, 0x42, 0xd5, 0x85, 0xf1, 0xa2, 0xc1, 0x5f, 0x1d, 0x42, 0xc6,
	0x5c, 0xe6, 0x8b, 0x53, 0xad, 0x6a, 0x43, 0x7f, 0x20, 0x07, 0x4a, 0xdc, 0x58, 0x96, 0xe8, 0x3c,
	0x17, 0x89, 0x15, 0x29, 0xb3, 0xb2, 0x10, 0xc6, 0xf2, 0xa2, 0x64, 0x85, 0xe9, 0x77, 0x3e, 0xeb,
	0x1c, 0x3d, 0x8c, 0xfa, 0x4e, 0x32, 0x6a, 0x14, 0x97, 0x8d, 0xe0, 0xdc, 0xd0, 0x5f, 0xc9, 0x11,
	0x9a, 0xa7, 0xe2, 0x4a, 0xa8, 0x54, 0x54, 0x2c, 0x76, 0x5e, 0x1b, 0x6f, 0x77, 0x7d, 0x3d, 0x40,
	0x5f, 0xcf, 0x9d, 0x7e, 0x1c, 0xe4, 0x18, 0x43, 0x70, 0xdc, 0x72, 0x3b, 0xf8, 0x93, 0x6c, 0x8d,
	0xb4, 0xb2, 0x3c, 0xb1, 0x17, 0xc2, 0x5a, 0xa9, 0x32, 0x43, 0x8f, 0xc9, 0x13, 0x03, 0x36, 0xac,
	0xe0, 0xd5, 0x4c, 0x38, 0x88, 0x89, 0x02, 0xae, 0xe1, 0x43, 0xec, 0x46, 0xbb, 0x8e, 0x3c, 0x6f,
	0xb8, 0x33, 0xa4, 0xe8, 0x6b, 0xf2, 0x14, 0x6d, 0xca, 0xda, 0x4c, 0x99, 0xd2, 0x56, 0x5e, 0xc9,
	0x84, 0x5b, 0xa9, 0x95, 0x0f, 0xa6, 0x1b, 0xa1, 0xcb, 0x09, 0xb0, 0x3f, 0xb7, 0xc9, 0xc1, 0xdf,
	0x1d, 0xb2, 0x71, 0xf6, 0xa1, 0x96, 0x65, 0x29, 0xd2, 0x53, 0x9e, 0x66, 0x82, 0xbe, 0x21, 0x24,
	0x76, 0x0b, 0x66, 0x17, 0xa5, 0xc0, 0x23, 0x37, 0x8f, 0x0f, 0x86, 0xad, 0x7c, 0x9f, 0x61, 0x8a,
	0x51, 0x7c, 0x09, 0x92, 0x68, 0x2d, 0x6e, 0x96, 0x74, 0x8f, 0xac, 0xe4, 0x62, 0x2e, 0x72, 0x3c,
	0x73, 0x25, 0xf2, 0x1b, 0xfa, 0x0b, 0xf9, 0x1c, 0x33, 0x27, 0xdc, 0x39, 0x2c, 0x99, 0x72, 0x05,
	0xde, 0x79, 0x9e, 0xeb, 0xeb, 0x8f, 0xdf, 0xe0, 0x21, 0xe6, 0xed, 0xd0, 0xa9, 0x31, 0xa8, 0x11,
	0x6a, 0x4f, 0xbc, 0xb4, 0x9d, 0xb5, 0xd7, 0xa4, 0x3b, 0xaa, 0xab, 0x4a, 0xa8, 0x64, 0x41, 0x29,
	0x79, 0xa4, 0x78, 0xe1, 0x43, 0x5d, 0x8b, 0x70, 0x4d, 0xf7, 0xc9, 0x2a, 0x2f, 0x74, 0xad, 0x6c,
	0x88, 0x24, 0xec, 0x20, 0xdb, 0xbb, 0xbe, 0x52, 0x26, 0x75, 0x9c, 0xcb, 0x04, 0x6e, 0x74, 0x25,
	0x73, 0x71, 0xaf, 0x8b, 0xfb, 0xef, 0xf2, 0x3d, 0x38, 0x9e, 0x43, 0xc1, 0x55, 0x18, 0x6b, 0xef,
	0xf8, 0xc5, 0xf0, 0xfe, 0x4a, 0x0c, 0x7f, 0x27, 0xa8, 0x8d, 0x82, 0xcd, 0xe0, 0xdf, 0xc7, 0xa4,
	0xe7, 0x89, 0x0b, 0xcb, 0xad, 0xb9, 0x3d, 0xa3, 0xd3, 0x3e, 0xe3, 0x53, 0x42, 0xc4, 0x4d, 0x29,
	0x2a, 0x09, 0xd7, 0x13, 0xa1, 0x96, 0x5a, 0x08, 0x1d, 0x90, 0x8d, 0xb2, 0x12, 0x73, 0x86, 0x6a,
	0x76, 0x53, 0x86, 0xb4, 0xf5, 0x1c, 0xf8, 0x93, 0xc3, 0x7e, 0x2f, 0x9d, 0x06, 0x73, 0xbe, 0xd4,
	0x3c, 0xf2, 0x1a, 0x07, 0x36, 0x9a, 0x03, 0xb2, 0x36, 0x2b, 0xd8, 0x35, 0xcf, 0x67, 0x22, 0xed,
	0xaf, 0x00, 0xff, 0x20, 0xea, 0xce, 0x8a, 0xf7, 0xb8, 0xa7, 0xdf, 0x92, 0xbd, 0x52, 0xcf, 0x44,
	0x01, 0x45, 0xc2, 0xe0, 0x54, 0x97, 0x3d, 0x51, 0x81, 0x6e, 0x15, 0x23, 0xdd, 0x6d, 0xb8, 0xb3,
	0x5b, 0x8a, 0x7e, 0x47, 0xf6, 0x6b, 0x25, 0x3f, 0xd4, 0x82, 0x39, 0x36, 0x15, 0x37, 0x60, 0x68,
	0x21, 0x66, 0xd3, 0x7f, 0x8c, 0x46, 0x7b, 0x9e, 0x9d, 0x78, 0xf2, 0xcc, 0x73, 0xf4, 0x2b, 0xb2,
	0xb3, 0x3c, 0x28, 0xe1, 0xa5, 0xad, 0xdd, 0x29, 0x5d, 0x34, 0xd8, 0x6e, 0x88, 0x51, 0xc0, 0x31,
	0x35, 0x73, 0x9d, 0xd7, 0xbe, 0xb2, 0xd7, 0x50, 0xd5, 0x42, 0xe8, 0x11, 0x41, 0x1b, 0x66, 0xac,
	0x2e, 0xd9, 0x5c, 0x1a, 0x69, 0x4d, 0x9f, 0xa0, 0x6a, 0xd3, 0xe1, 0x17, 0x00, 0xff, 0x86, 0x28,
	0xfd, 0xc2, 0x2b, 0x63, 0xa8, 0x43, 0xc3, 0xec, 0xb4, 0xd2, 0xd7, 0xaa, 0xdf, 0x43, 0xe5, 0xd6,
	0x12, 0xbf, 0x44, 0x98, 0x1e, 0x92, 0x75, 0x91, 0x65, 0x86, 0x4d, 0xb9, 0x4d, 0xa6, 0x10, 0xdc,
	0x3a, 0xca, 0x7a, 0x0e, 0xfb, 0xd1, 0x43, 0x74, 0x48, 0x76, 0x63, 0x99, 0x41, 0xc7, 0x66, 0x72,
	0xc6, 0x2b, 0x28, 0x72, 0x5e, 0x67, 0x53, 0xdb, 0xdf, 0x40, 0xe5, 0x0e, 0x50, 0xe7, 0x81, 0x19,
	0x21, 0x41, 0xbf, 0x24, 0x3b, 0x31, 0xb7, 0x36, 0x87, 0x3e, 0xb0, 0xd0, 0xfb, 0x33, 0x76, 0xad,
	0x55, 0x7f, 0xd3, 0x1f, 0xef, 0x89, 0x13, 0xc4, 0xdf, 0x6b, 0x85, 0xbe, 0xef, 0x68, 0xad, 0xb6,
	0x3c, 0xef, 0x6f, 0x05, 0xdf, 0x2d, 0xf5, 0xa5, 0x23, 0x5a, 0xfa, 0x30, 0xaa, 0x52, 0xf4, 0xbe,
	0xdd, 0xd6, 0x87, 0xa9, 0x94, 0xde, 0xf5, 0x6f, 0x2b, 0x2e, 0x95, 0x9b, 0x37, 0x4e, 0xbf, 0xd3,
	0xd6, 0x5f, 0x06, 0xc6, 0xe9, 0x61, 0x3c, 0x7d, 0xac, 0xf7, 0x11, 0x51, 0x5f, 0x1a, 0x77, 0x2d,
	0x7c, 0x4c, 0x60, 0x03, 0xd5, 0x69, 0xac, 0x84, 0xce, 0x07, 0xc2, 0xb8, 0xc6, 0x47, 0x9b, 0xdd,
	0x50, 0x4e, 0x81, 0x8c, 0x90, 0xf3, 0x36, 0x50, 0x4e, 0x4b, 0x9b, 0xb4, 0xd2, 0x6e, 0x42, 0x05,
	0xa3, 0x3d, 0x5f, 0x4e, 0x0d, 0x3b, 0xf6, 0xa4, 0xb7, 0x0a, 0xef, 0x0a, 0x55, 0x03, 0xd7, 0x2f,
	0x73, 0xbd, 0x80, 0x07, 0x7b, 0x72, 0xfb, 0xae, 0x80, 0x8f, 0x03, 0x4c, 0x5f, 0xc1, 0x01, 0x41,
	0xea, 0xdf, 0x8b, 0xc5, 0x0b, 0x3f, 0xf5, 0xf6, 0xc1, 0x60, 0x7d, 0x59, 0xe4, 0xfe, 0xcd, 0x4e,
	0x17, 0x38, 0xe2, 0xbe, 0x21, 0x7b, 0xa6, 0x80, 0xe2, 0x80, 0x6b, 0x40, 0xce, 0xe1, 0xbb, 0x14,
	0x9e, 0xfa, 0x29, 0x9e, 0x41, 0x91, 0x8b, 0x3c, 0xe5, 0xed, 0x06, 0x6f, 0xc8, 0xba, 0xef, 0xf9,
	0x11, 0x8c, 0x95, 0x8a, 0xbb, 0xb7, 0x97, 0xc6, 0xbd, 0x0d, 0xaf, 0x73, 0xf8, 0x1a, 0x21, 0x18,
	0x46, 0xfb, 0x96, 0x34, 0x63, 0x8f, 0x7b, 0xed, 0xe0, 0x9f, 0x4e, 0x63, 0xec, 0x27, 0x89, 0x9b,
	0x54, 0x66, 0x26, 0x55, 0x18, 0x4a, 0xb8, 0x76, 0xd8, 0x94, 0x4b, 0x3f, 0x91, 0x00, 0x73, 0x6b,
	0x37, 0x59, 0xcc, 0x54, 0x56, 0x16, 0xfb, 0x1e, 0x26, 0x0b, 0x6e, 0x1c, 0x5a, 0x72, 0x05, 0x3d,
	0xb1, 0xe2, 0x51, 0xdc, 0xd0, 0x6d, 0xf2, 0x10, 0x4a, 0x3b, 0x74, 0xb6, 0x5b, 0x7a, 0x6b, 0xbd,
	0x6c, 0x5c, 0xbf, 0x81, 0xab, 0xaf, 0x66, 0xf8, 0x2d, 0xc3, 0xf6, 0xdc, 0x3c, 0xee, 0xff, 0xff,
	0xab, 0xf0, 0x16, 0xf9, 0x28, 0xe8, 0x5c, 0x64, 0x62, 0x21, 0x9a, 0x46, 0xc5, 0x35, 0x7d, 0x46,
	0xba, 0x31, 0xd4, 0x6a, 0x09, 0xbf, 0xd0, 0x9a, 0xcb, 0xfd, 0xe0, 0x05, 0xd9, 0x0c, 0xa9, 0x6a,
	0x0d, 0xf7, 0x4c, 0x84, 0xaf, 0x33, 0x78, 0x70, 0xeb, 0xd3, 0xe7, 0x7f, 0x1c, 0x66, 0xd2, 0x4e,
	0xeb, 0x78, 0x98, 0xe8, 0xe2, 0x65, 0x39, 0x2b, 0x54, 0xa6, 0xbf, 0xd6, 0xa9, 0x7c, 0x59, 0x6a,
	0x58, 0xe0, 0xb7, 0xdf, 0x4c, 0x3e, 0x89, 0x57, 0x71, 0xf5, 0xea, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x08, 0xe3, 0xe5, 0xed, 0x3f, 0x08, 0x00, 0x00,
}
